if (typeof require === "function") bigInt = require("../BigInteger.js");

describe("BigInteger", function () {

    var a = "1234567890",
        b = a + a + a + a + a + a + a + a + a + a,
        c = b + b + b + b + b + b + b + b + b + b,
        d = c + c + c + c + c + c + c + c + c + c,
        e = d + d + d;

    beforeAll(function () {
        jasmine.addMatchers({
          toEqualBigInt: function() {
            return {
              compare: function(actual, expected) {
                return {pass: bigInt(actual).equals(expected)};
              }
            };
          }
        });
    });

    it("can handle large numbers", function () {
        var tenFactorial = "3628800",
            hundredFactorial = "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000",
            threeToTenThousand = "16313501853426258743032567291811547168121324535825379939348203261918257308143190787480155630847848309673252045223235795433405582999177203852381479145368112501453192355166224391025423628843556686559659645012014177448275529990373274425446425751235537341867387607813619937225616872862016504805593174059909520461668500663118926911571773452255850626968526251879139867085080472539640933730243410152186914328917354576854457274195562218013337745628502470673059426999114202540773175988199842487276183685299388927825296786440252999444785694183675323521704432195785806270123388382931770198990841300861506996108944782065015163410344894945809337689156807686673462563038164792190665340124344133980763205594364754963451564072340502606377790585114123814919001637177034457385019939060232925194471114235892978565322415628344142184842892083466227875760501276009801530703037525839157893875741192497705300469691062454369926795975456340236777734354667139072601574969834312769653557184396147587071260443947944862235744459711204473062937764153770030210332183635531818173456618022745975055313212598514429587545547296534609597194836036546870491771927625214352957503454948403635822345728774885175809500158451837389413798095329711993092101417428406774326126450005467888736546254948658602484494535938888656542746977424368385335496083164921318601934977025095780370104307980276356857350349205866078371806065542393536101673402017980951598946980664330391505845803674248348878071010412918667335823849899623486215050304052577789848512410263834811719236949311423411823585316405085306164936671137456985394285677324771775046050970865520893596151687017153855755197348199659070192954771308347627111052471134476325986362838585959552209645382089055182871854866744633737533217524880118401787595094060855717010144087136495532418544241489437080074716158404895914136451802032446707961058757633345691696743293869623745410870051851590672859347061212573446572045088465460616826082579731686004585218284333452396157730036306379421822435818001505905203918209206969662326706952623512427380240468784114535101496733983401240219840048956733689309620321613793757156727562461651933397540266795963865921590913322060572673349849253303397874242381960775337182730037783698708748781738419747698880321601186310506332869704931303076839444790968339306301273371014087248060946851793697973114432706759288546077622831002526800554849696867710280945946603669593797354642136622231192695027321229511912952940320879763123151760555959496961163141455688278842949587288399100273691880018774147568892650186152065335219113072582417699616901995530249937735219099786758954892534365835235843156112799728164123461219817343904782402517111603206575330527850752564642995318064985900815557979945885931124351303252811255254295797082281946658798705979077492469849644183166585950844953164726896146168297808178398470451561320526180542310840744843107469368959707726836608471817060598771730170755446473440774031371227437651048421606224757527085958515947273151027400662948161111284777828103531499488913672800783167888051177155427285103861736658069404797695900758820465238673970882660162285107599221418743657006872537842677883708807515850397691812433880561772652364847297019508025848964833883225165668986935081274596293983121864046277268590401580209059988500511262470167150495261908136688693861324081559046336288963037090312033522400722360882494928182809075406914319957044927504420797278117837677431446979085756432990753582588102440240611039084516401089948868433353748444104639734074519165067632941419347985624435567342072815910754484123812917487312938280670403228188813003978384081332242484646571417574404852962675165616101527367425654869508712001788393846171780457455963045764943565964887518396481296159902471996735508854292964536796779404377230965723361625182030798297734785854606060323419091646711138678490928840107449923456834763763114226000770316931243666699425694828181155048843161380832067845480569758457751090640996007242018255400627276908188082601795520167054701327802366989747082835481105543878446889896230696091881643547476154998574015907396059478684978574180486798918438643164618541351689258379042326487669479733384712996754251703808037828636599654447727795924596382283226723503386540591321268603222892807562509801015765174359627788357881606366119032951829868274617539946921221330284257027058653162292482686679275266764009881985590648534544939224296689791195355783205968492422636277656735338488299104238060289209390654467316291591219712866052661347026855261289381236881063068219249064767086495184176816629077103667131505064964190910450196502178972477361881300608688593782509793781457170396897496908861893034634895715117114601514654381347139092345833472226493656930996045016355808162984965203661519182202145414866559662218796964329217241498105206552200001";
        function factorial(n) {
            if (n.equals(bigInt.zero) || n.equals(bigInt.one)) {
                return bigInt.one;
            }
            return factorial(n.prev()).times(n);
        }
        expect(factorial(bigInt(10))).toEqualBigInt(tenFactorial);
        expect(factorial(bigInt(100))).toEqualBigInt(hundredFactorial);
        expect(bigInt(3).pow(10000)).toEqualBigInt(threeToTenThousand);
    });

    // See issue #7
    //   https://github.com/peterolson/BigInteger.js/issues/7
    it("is immutable", function () {
        var n = bigInt(14930352);
        n.add(9227465);
        expect(n).toEqualBigInt(14930352);
        n.subtract(123456);
        expect(n).toEqualBigInt(14930352);
    });

    describe("Equality and comparison", function () {
        it("works for positive numbers", function () {
            expect(bigInt.one).toEqualBigInt(1);
            expect(1).not.toEqualBigInt(2);
            expect(0).not.toEqualBigInt(1);
            expect(987).toEqualBigInt(987);
            expect(987).not.toEqualBigInt(789);
            expect(7895).not.toEqualBigInt(9875);
            expect("98765432101234567890").toEqualBigInt("98765432101234567890");
            expect("98765432101234567890").not.toEqualBigInt("98765432101234567999");
            expect("98765432101234567890").not.toEqualBigInt("98765432101234567000");

            expect(bigInt(54).greater(45)).toBe(true);
            expect(bigInt(45).greater(54)).toBe(false);
            expect(bigInt(45).greater(45)).toBe(false);
            expect(bigInt("5498765432109876").greater("4598765432109876")).toBe(true);
            expect(bigInt("4598765432109876").greater("5498765432109876")).toBe(false);
            expect(bigInt("4598765432109876").greater("4598765432109876")).toBe(false);

            expect(bigInt(32).greaterOrEquals(23)).toBe(true);
            expect(bigInt(23).greaterOrEquals(32)).toBe(false);
            expect(bigInt(23).greaterOrEquals(23)).toBe(true);
            expect(bigInt("3298763232109876").greaterOrEquals("2398763232109876")).toBe(true);
            expect(bigInt("2398763232109876").greaterOrEquals("3298763232109876")).toBe(false);
            expect(bigInt("2398763232109876").greaterOrEquals("2398763232109876")).toBe(true);

            expect(bigInt(987).lesser(789)).toBe(false);
            expect(bigInt(789).lesser(987)).toBe(true);
            expect(bigInt(789).lesser(789)).toBe(false);
            expect(bigInt("987987698732109876").lesser("789987698732109876")).toBe(false);
            expect(bigInt("789987698732109876").lesser("987987698732109876")).toBe(true);
            expect(bigInt("789987698732109876").lesser("789987698732109876")).toBe(false);

            expect(bigInt(6012).lesserOrEquals(1195)).toBe(false);
            expect(bigInt(1195).lesserOrEquals(6012)).toBe(true);
            expect(bigInt(1195).lesserOrEquals(1195)).toBe(true);
            expect(bigInt("6012987660126012109876").lesserOrEquals("1195987660126012109876")).toBe(false);
            expect(bigInt("1195987660126012109876").lesserOrEquals("6012987660126012109876")).toBe(true);
            expect(bigInt("1195987660126012109876").lesserOrEquals("1195987660126012109876")).toBe(true);

            expect(bigInt(54).notEquals(45)).toBe(true);
            expect(bigInt(45).notEquals(54)).toBe(true);
            expect(bigInt(45).notEquals(45)).toBe(false);
            expect(bigInt("5498765432109876").notEquals("4598765432109876")).toBe(true);
            expect(bigInt("4598765432109876").notEquals("5498765432109876")).toBe(true);
            expect(bigInt("4598765432109876").notEquals("4598765432109876")).toBe(false);

            expect(bigInt("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000")).toEqualBigInt("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000");
            expect(bigInt("234345345345")).toEqualBigInt("234345345345");
            expect(bigInt("1230000000")).toEqualBigInt("1230000000");
        });

        it("works for negative numbers", function () {
            expect(bigInt.minusOne).toEqualBigInt(-1);
            expect(-1).not.toEqualBigInt(-2);
            expect(-0).not.toEqualBigInt(-1);
            expect(-987).toEqualBigInt(-987);
            expect(-987).not.toEqualBigInt(-789);
            expect(-7895).not.toEqualBigInt(-9875);
            expect("-98765432101234567890").toEqualBigInt("-98765432101234567890");
            expect("-98765432101234567890").not.toEqualBigInt("-98765432101234567999");
            expect("-98765432101234567890").not.toEqualBigInt("-98765432101234567000");

            expect(bigInt(-54).greater(-45)).toBe(false);
            expect(bigInt(-45).greater(-54)).toBe(true);
            expect(bigInt(-45).greater(-45)).toBe(false);
            expect(bigInt(45).greater("-549876540654065065132109876")).toBe(true);
            expect(bigInt(-45).greater("-549876540654065065132109876")).toBe(true);
            expect(bigInt(45).greater("549876540654065065132109876")).toBe(false);
            expect(bigInt(-45).greater("549876540654065065132109876")).toBe(false);
            expect(bigInt("-5498765432109876").greater("-4598765432109876")).toBe(false);
            expect(bigInt("-4598765432109876").greater("-5498765432109876")).toBe(true);
            expect(bigInt("-4598765432109876").greater("-4598765432109876")).toBe(false);

            expect(bigInt(-32).greaterOrEquals(-23)).toBe(false);
            expect(bigInt(-23).greaterOrEquals(-32)).toBe(true);
            expect(bigInt(-23).greaterOrEquals(-23)).toBe(true);
            expect(bigInt("-3298763232109876").greaterOrEquals("-2398763232109876")).toBe(false);
            expect(bigInt("-2398763232109876").greaterOrEquals("-3298763232109876")).toBe(true);
            expect(bigInt("-2398763232109876").greaterOrEquals("-2398763232109876")).toBe(true);

            expect(bigInt(-987).lesser(-789)).toBe(true);
            expect(bigInt(-789).lesser(-987)).toBe(false);
            expect(bigInt(-789).lesser(-789)).toBe(false);
            expect(bigInt("-987987698732109876").lesser(82)).toBe(true);
            expect(bigInt("-987987698732109876").lesser(-82)).toBe(true);
            expect(bigInt("-987987698732109876").lesser("-789987698732109876")).toBe(true);
            expect(bigInt("-789987698732109876").lesser("-987987698732109876")).toBe(false);
            expect(bigInt("-789987698732109876").lesser("-789987698732109876")).toBe(false);

            expect(bigInt(-6012).lesserOrEquals(-1195)).toBe(true);
            expect(bigInt(-1195).lesserOrEquals(-6012)).toBe(false);
            expect(bigInt(-1195).lesserOrEquals(-1195)).toBe(true);
            expect(bigInt("-6012987660126012109876").lesserOrEquals("-1195987660126012109876")).toBe(true);
            expect(bigInt("-1195987660126012109876").lesserOrEquals("-6012987660126012109876")).toBe(false);
            expect(bigInt("-1195987660126012109876").lesserOrEquals("-1195987660126012109876")).toBe(true);

            expect(bigInt(-54).notEquals(-45)).toBe(true);
            expect(bigInt(-45).notEquals(-54)).toBe(true);
            expect(bigInt(-45).notEquals(-45)).toBe(false);
            expect(bigInt("-5498765432109876").notEquals("-4598765432109876")).toBe(true);
            expect(bigInt("-4598765432109876").notEquals("-5498765432109876")).toBe(true);
            expect(bigInt("-4598765432109876").notEquals("-4598765432109876")).toBe(false);

            expect(bigInt("-1")).toEqualBigInt("-1");
            expect(bigInt("-10000000000000000")).toEqualBigInt("-10000000000000000");
        });

        it("treats negative and positive numbers differently", function () {
            expect(54).not.toEqualBigInt(-54);
            expect("-123456789876543210").not.toEqualBigInt("123456789876543210");
            expect(bigInt(76).notEquals(-76)).toBe(true);

            expect(bigInt(2).greater(-2)).toBe(true);
            expect(bigInt(-2).greater(2)).toBe(false);
            expect(bigInt(2).greater(-3)).toBe(true);
            expect(bigInt(2).greater(-1)).toBe(true);
            expect(bigInt(-2).greater(3)).toBe(false);
            expect(bigInt(-2).greater(1)).toBe(false);

            expect(bigInt(2).greaterOrEquals(-2)).toBe(true);
            expect(bigInt(-2).greaterOrEquals(2)).toBe(false);
            expect(bigInt(2).greaterOrEquals(-3)).toBe(true);
            expect(bigInt(2).greaterOrEquals(-1)).toBe(true);
            expect(bigInt(-2).greaterOrEquals(3)).toBe(false);
            expect(bigInt(-2).greaterOrEquals(1)).toBe(false);

            expect(bigInt(2).lesser(-2)).toBe(false);
            expect(bigInt(-2).lesser(2)).toBe(true);
            expect(bigInt(2).lesser(-3)).toBe(false);
            expect(bigInt(2).lesser(-1)).toBe(false);
            expect(bigInt(-2).lesser(3)).toBe(true);
            expect(bigInt(-2).lesser(1)).toBe(true);

            expect(bigInt(2).lesserOrEquals(-2)).toBe(false);
            expect(bigInt(-2).lesserOrEquals(2)).toBe(true);
            expect(bigInt(2).lesserOrEquals(-3)).toBe(false);
            expect(bigInt(2).lesserOrEquals(-1)).toBe(false);
            expect(bigInt(-2).lesserOrEquals(3)).toBe(true);
            expect(bigInt(-2).lesserOrEquals(1)).toBe(true);
        });

        it("compareAbs treats negative and positive numbers the same", function () {
            expect(bigInt(0).compareAbs(36)).toBe(-1);
            expect(bigInt(0).compareAbs(-36)).toBe(-1);
            expect(bigInt(36).compareAbs(5)).toBe(1);
            expect(bigInt(36).compareAbs(-5)).toBe(1);
            expect(bigInt(-36).compareAbs(5)).toBe(1);
            expect(bigInt(-36).compareAbs(-5)).toBe(1);
            expect(bigInt(5).compareAbs(36)).toBe(-1);
            expect(bigInt(5).compareAbs(-36)).toBe(-1);
            expect(bigInt(-5).compareAbs(36)).toBe(-1);
            expect(bigInt(-5).compareAbs(-36)).toBe(-1);
            expect(bigInt(36).compareAbs(36)).toBe(0);
            expect(bigInt(36).compareAbs(-36)).toBe(0);
            expect(bigInt(-36).compareAbs(36)).toBe(0);
            expect(bigInt(-36).compareAbs(-36)).toBe(0);

            expect(bigInt(0).compareAbs("9999999999999999999")).toBe(-1);
            expect(bigInt(0).compareAbs("-9999999999999999999")).toBe(-1);
            expect(bigInt("9999999999999999999").compareAbs("55555555555555555")).toBe(1);
            expect(bigInt("9999999999999999999").compareAbs("-55555555555555555")).toBe(1);
            expect(bigInt("-9999999999999999999").compareAbs("55555555555555555")).toBe(1);
            expect(bigInt("-9999999999999999999").compareAbs("-55555555555555555")).toBe(1);
            expect(bigInt("55555555555555555").compareAbs("9999999999999999999")).toBe(-1);
            expect(bigInt("55555555555555555").compareAbs("-9999999999999999999")).toBe(-1);
            expect(bigInt("-55555555555555555").compareAbs("9999999999999999999")).toBe(-1);
            expect(bigInt("-55555555555555555").compareAbs("-9999999999999999999")).toBe(-1);
            expect(bigInt("9999999999999999999").compareAbs("9999999999999999999")).toBe(0);
            expect(bigInt("9999999999999999999").compareAbs("-9999999999999999999")).toBe(0);
            expect(bigInt("-9999999999999999999").compareAbs("9999999999999999999")).toBe(0);
            expect(bigInt("-9999999999999999999").compareAbs("-9999999999999999999")).toBe(0);
        });

        it("treats 0 and -0 the same", function () {
            expect(0).toEqualBigInt("-0");
            expect(bigInt.zero).toEqualBigInt("-0");
        });

        it("ignores leading zeros", function () {
            expect("0000000000").toEqualBigInt("0");
            expect("000000000000023").toEqualBigInt(23);
            expect(bigInt("-0000000000000000000000123")).toEqualBigInt("-123");
        });

        it("treats numbers constructed different ways the same", function () {
            expect("12e5").toEqualBigInt(12e5);
            expect(12e5).toEqualBigInt("1200000");
            expect("1").toEqualBigInt(1);
            expect(bigInt(12345)).toEqualBigInt("12345");
            expect(bigInt("9876543210")).toEqualBigInt(bigInt(9876543210));
        });

        it("allows Infinity and -Infinity", function () {
            // See issue #61 
            // https://github.com/peterolson/BigInteger.js/issues/61
            expect(bigInt(56).lesser(Infinity)).toBe(true);
            expect(bigInt(56).greater(-Infinity)).toBe(true);
            expect(bigInt("50e50").lesser(Infinity)).toBe(true);
            expect(bigInt("50e50").greater(-Infinity)).toBe(true);
        });
    });

    describe("Addition and subtraction", function () {
        it("by 0 is the identity", function () {
            expect(bigInt(1).add(0)).toEqualBigInt(1);
            expect(bigInt(-1).add(0)).toEqualBigInt(-1);
            expect(bigInt(0).add(-1)).toEqualBigInt(-1);
            expect(bigInt(0).add(153)).toEqualBigInt(153);
            expect(bigInt(153).add(0)).toEqualBigInt(153);
            expect(bigInt(0).add(-153)).toEqualBigInt(-153);
            expect(bigInt(-153).add(0)).toEqualBigInt(-153);
            expect(bigInt(0).add("9844190321790980841789")).toEqualBigInt("9844190321790980841789");
            expect(bigInt("9844190321790980841789").add(0)).toEqualBigInt("9844190321790980841789");
            expect(bigInt(0).add("-9844190321790980841789")).toEqualBigInt("-9844190321790980841789");
            expect(bigInt("-9844190321790980841789").add(0)).toEqualBigInt("-9844190321790980841789");

            expect(bigInt(1).minus(0)).toEqualBigInt(1);
            expect(bigInt(-1).minus(0)).toEqualBigInt(-1);
            expect(bigInt(153).minus(0)).toEqualBigInt(153);
            expect(bigInt(-153).minus(0)).toEqualBigInt(-153);
            expect(bigInt("9844190321790980841789").minus(0)).toEqualBigInt("9844190321790980841789");
            expect(bigInt("-9844190321790980841789").minus(0)).toEqualBigInt("-9844190321790980841789");
        });

        it("addition by inverse is 0, subtraction by self is 0", function () {
            expect(bigInt("5").subtract(bigInt("5"))).toEqualBigInt(0);
            expect(bigInt("5").add(bigInt("-5"))).toEqualBigInt(0);
            expect(bigInt("10000000000000000").subtract(bigInt("10000000000000000"))).toEqualBigInt(0);
            expect(bigInt("10000000000000000").add(bigInt("-10000000000000000"))).toEqualBigInt(0);
        });

        it("handles signs correctly", function () {
            expect(bigInt(1).add(1)).toEqualBigInt(2);
            expect(bigInt(1).add(-5)).toEqualBigInt(-4);
            expect(bigInt(-1).add(5)).toEqualBigInt(4);
            expect(bigInt(-1).add(-5)).toEqualBigInt(-6);
            expect(bigInt(5).add(1)).toEqualBigInt(6);
            expect(bigInt(5).add(-1)).toEqualBigInt(4);
            expect(bigInt(-5).add(1)).toEqualBigInt(-4);
            expect(bigInt(-5).add(-1)).toEqualBigInt(-6);

            expect(bigInt(1).minus(1)).toEqualBigInt(0);
            expect(bigInt(1).minus(-5)).toEqualBigInt(6);
            expect(bigInt(-1).minus(5)).toEqualBigInt(-6);
            expect(bigInt(-1).minus(-5)).toEqualBigInt(4);
            expect(bigInt(5).minus(1)).toEqualBigInt(4);
            expect(bigInt(5).minus(-1)).toEqualBigInt(6);
            expect(bigInt(-5).minus(1)).toEqualBigInt(-6);
            expect(bigInt(-5).minus(-1)).toEqualBigInt(-4);

            expect(bigInt("1234698764971301").add(5)).toEqualBigInt("1234698764971306");
            expect(bigInt("1234698764971301").add(-5)).toEqualBigInt("1234698764971296");
            expect(bigInt("-1234698764971301").add(5)).toEqualBigInt("-1234698764971296");
            expect(bigInt("-1234698764971301").add(-5)).toEqualBigInt("-1234698764971306");
            expect(bigInt(5).add("1234698764971301")).toEqualBigInt("1234698764971306");
            expect(bigInt(5).add("-1234698764971301")).toEqualBigInt("-1234698764971296");
            expect(bigInt(-5).add("1234698764971301")).toEqualBigInt("1234698764971296");
            expect(bigInt(-5).add("-1234698764971301")).toEqualBigInt("-1234698764971306");

            expect(bigInt("1234698764971301").minus(5)).toEqualBigInt("1234698764971296");
            expect(bigInt("1234698764971301").minus(-5)).toEqualBigInt("1234698764971306");
            expect(bigInt("-1234698764971301").minus(5)).toEqualBigInt("-1234698764971306");
            expect(bigInt("-1234698764971301").minus(-5)).toEqualBigInt("-1234698764971296");
            expect(bigInt(5).minus("1234698764971301")).toEqualBigInt("-1234698764971296");
            expect(bigInt(5).minus("-1234698764971301")).toEqualBigInt("1234698764971306");
            expect(bigInt(-5).minus("1234698764971301")).toEqualBigInt("-1234698764971306");
            expect(bigInt(-5).minus("-1234698764971301")).toEqualBigInt("1234698764971296");

            expect(bigInt("1234567890987654321").plus("9876543210123456789")).toEqualBigInt("11111111101111111110");
            expect(bigInt("1234567890987654321").plus("-9876543210123456789")).toEqualBigInt("-8641975319135802468");
            expect(bigInt("-1234567890987654321").plus("9876543210123456789")).toEqualBigInt("8641975319135802468");
            expect(bigInt("-1234567890987654321").plus("-9876543210123456789")).toEqualBigInt("-11111111101111111110");
            expect(bigInt("9876543210123456789").plus("1234567890987654321")).toEqualBigInt("11111111101111111110");
            expect(bigInt("9876543210123456789").plus("-1234567890987654321")).toEqualBigInt("8641975319135802468");
            expect(bigInt("-9876543210123456789").plus("1234567890987654321")).toEqualBigInt("-8641975319135802468");
            expect(bigInt("-9876543210123456789").plus("-1234567890987654321")).toEqualBigInt("-11111111101111111110");

            expect(bigInt("1234567890987654321").minus("9876543210123456789")).toEqualBigInt("-8641975319135802468");
            expect(bigInt("1234567890987654321").minus("-9876543210123456789")).toEqualBigInt("11111111101111111110");
            expect(bigInt("-1234567890987654321").minus("9876543210123456789")).toEqualBigInt("-11111111101111111110");
            expect(bigInt("-1234567890987654321").minus("-9876543210123456789")).toEqualBigInt("8641975319135802468");
            expect(bigInt("9876543210123456789").minus("1234567890987654321")).toEqualBigInt("8641975319135802468");
            expect(bigInt("9876543210123456789").minus("-1234567890987654321")).toEqualBigInt("11111111101111111110");
            expect(bigInt("-9876543210123456789").minus("1234567890987654321")).toEqualBigInt("-11111111101111111110");
            expect(bigInt("-9876543210123456789").minus("-1234567890987654321")).toEqualBigInt("-8641975319135802468");

            expect(bigInt("-9007199254740991").add(bigInt("-1")).toString() === "-9007199254740992").toBe(true);
            expect(bigInt("-5616421592529327000000000000000").minus("987682355516543").toString() === "-5616421592529327987682355516543").toBe(true);

            expect(bigInt("0").negate().add("10000000000000000")).toEqualBigInt("10000000000000000");
            expect(bigInt("0").negate().add(bigInt("-1"))).toEqualBigInt("-1");
        });

        it("carries over correctly", function () {
            // Fibonacci; see issue #9
            //   https://github.com/peterolson/BigInteger.js/issues/9
            var fibs = ["1", "1", "2", "3", "5", "8", "13", "21", "34", "55", "89", "144", "233", "377", "610", "987", "1597", "2584", "4181", "6765", "10946", "17711", "28657", "46368", "75025", "121393", "196418", "317811", "514229", "832040", "1346269", "2178309", "3524578", "5702887", "9227465", "14930352", "24157817", "39088169", "63245986", "102334155", "165580141", "267914296", "433494437", "701408733", "1134903170", "1836311903", "2971215073", "4807526976", "7778742049", "12586269025"];
            var number = bigInt(1);
            var last = bigInt(1);

            for (i = 2; i < 50; i++) {
                number = number.add(last);
                last = number.minus(last);
                expect(number).toEqualBigInt(fibs[i]);
            }

            expect(bigInt("9007199254740991").add(bigInt("1")).toString()).toBe("9007199254740992");
            expect(bigInt("999999999999999999999000000000000000000000").add("1000000000000000000000")).toEqualBigInt("1e42");
            expect(bigInt("1e20").add("9007199254740972")).toEqualBigInt("100009007199254740972");
            expect(bigInt("-9007199254740983").add(bigInt("-9999999999999998")).toString() === "-19007199254740981").toBe(true); // issue #42

            expect(bigInt(c).minus(bigInt(b).next())).toEqualBigInt("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678899999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
            expect(bigInt(b).minus(bigInt(c).next())).toEqualBigInt("-1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
            expect(bigInt("100000000000000000000000000000000000").minus("999999999999999999")).toEqualBigInt("99999999999999999000000000000000001");

            expect(bigInt("10000000010000000").subtract("10000000")).toEqualBigInt("10000000000000000"); // issue #54
        });

        it("work", function () {
            expect(bigInt("10").add("10")).toEqualBigInt("20");
            expect(bigInt("-10000000000000000").add("0")).toEqualBigInt("-10000000000000000");
            expect(bigInt("0").add("10000000000000000")).toEqualBigInt("10000000000000000");
            expect(bigInt(9999999).add(1)).toEqualBigInt(10000000);
            expect(bigInt(10000000).minus(1)).toEqualBigInt(9999999);
            expect(bigInt("-1000000000000000000000000000000000001").add("1000000000000000000000000000000000000")).toEqualBigInt(-1);
            expect(bigInt("100000000000000000002222222222222222222").minus("100000000000000000001111111111111111111")).toEqualBigInt("1111111111111111111");
            expect(bigInt("1").add("0")).toEqualBigInt("1");
            expect(bigInt("10").add("10000000000000000")).toEqualBigInt("10000000000000010");
            expect(bigInt("10000000000000000").add("10")).toEqualBigInt("10000000000000010");
            expect(bigInt("10000000000000000").add("10000000000000000")).toEqualBigInt("20000000000000000");
        });
    });

    describe("Multiplication", function () {
        it("by 0 equals 0", function () {
            expect(bigInt(0).times(0)).toEqualBigInt(0);
            expect(bigInt(0).times("-0")).toEqualBigInt(0);
            expect(bigInt(1).times(0)).toEqualBigInt("-0");
            expect(bigInt(-0).times(1)).toEqualBigInt(0);
            expect(bigInt("1234567890987654321").times(0)).toEqualBigInt("-0");
            expect(bigInt(-0).times("1234567890987654321")).toEqualBigInt(0);
            expect(bigInt(0).times("-1234567890987654321")).toEqualBigInt(0);
        });

        it("by 1 is the identity", function () {
            expect(bigInt(1).times(1)).toEqualBigInt(1);
            expect(bigInt(-1).times(1)).toEqualBigInt(-1);
            expect(bigInt(1).times(-1)).toEqualBigInt(-1);
            expect(bigInt(1).times(153)).toEqualBigInt(153);
            expect(bigInt(153).times(1)).toEqualBigInt(153);
            expect(bigInt(1).times(-153)).toEqualBigInt(-153);
            expect(bigInt(-153).times(1)).toEqualBigInt(-153);
            expect(bigInt(1).times("9844190321790980841789")).toEqualBigInt("9844190321790980841789");
            expect(bigInt("9844190321790980841789").times(1)).toEqualBigInt("9844190321790980841789");
            expect(bigInt(1).times("-9844190321790980841789")).toEqualBigInt("-9844190321790980841789");
            expect(bigInt("-9844190321790980841789").times(1)).toEqualBigInt("-9844190321790980841789");
        });

        it("handles signs correctly", function () {
            expect(bigInt(100).times(100)).toEqualBigInt(10000);
            expect(bigInt(100).times(-100)).toEqualBigInt(-10000);
            expect(bigInt(-100).times(100)).toEqualBigInt(-10000);
            expect(bigInt(-100).times(-100)).toEqualBigInt(10000);

            expect(bigInt(13579).times("163500573666152634716420931676158")).toEqualBigInt("2220174289812686626814279831230549482");
            expect(bigInt(13579).times("-163500573666152634716420931676158")).toEqualBigInt("-2220174289812686626814279831230549482");
            expect(bigInt(-13579).times("163500573666152634716420931676158")).toEqualBigInt("-2220174289812686626814279831230549482");
            expect(bigInt(-13579).times("-163500573666152634716420931676158")).toEqualBigInt("2220174289812686626814279831230549482");
            expect(bigInt("163500573666152634716420931676158").times(13579)).toEqualBigInt("2220174289812686626814279831230549482");
            expect(bigInt("163500573666152634716420931676158").times(-13579)).toEqualBigInt("-2220174289812686626814279831230549482");
            expect(bigInt("-163500573666152634716420931676158").times(13579)).toEqualBigInt("-2220174289812686626814279831230549482");
            expect(bigInt("-163500573666152634716420931676158").times(-13579)).toEqualBigInt("2220174289812686626814279831230549482");
            expect(bigInt("163500573666152634716420931676158").times(-1)).toEqualBigInt("-163500573666152634716420931676158");

            expect(bigInt("1234567890987654321").times("132435465768798")).toEqualBigInt("163500573666152634716420931676158");
            expect(bigInt("1234567890987654321").times("-132435465768798")).toEqualBigInt("-163500573666152634716420931676158");
            expect(bigInt("-1234567890987654321").times("132435465768798")).toEqualBigInt("-163500573666152634716420931676158");
            expect(bigInt("-1234567890987654321").times("-132435465768798")).toEqualBigInt("163500573666152634716420931676158");
        });

        it("carries over correctly", function () {
            expect(bigInt("50000005000000").times("10000001")).toEqualBigInt("500000100000005000000");

            expect(bigInt(e).times(bigInt(e).times(3))).toEqualBigInt

            // See pull request #21
            //   https://github.com/peterolson/BigInteger.js/pull/21
            expect(bigInt("50000005000000").times("10000001")).toEqualBigInt("500000100000005000000");
        });
    });

    describe("Division", function () {
        it("by 1 is the identity", function () {
            expect(bigInt(1).over(1)).toEqualBigInt(1);
            expect(bigInt(-1).over(1)).toEqualBigInt(-1);
            expect(bigInt(1).over(-1)).toEqualBigInt(-1);
            expect(bigInt(153).over(1)).toEqualBigInt(153);
            expect(bigInt(-153).over(1)).toEqualBigInt(-153);
            expect(bigInt("9844190321790980841789").over(1)).toEqualBigInt("9844190321790980841789");
            expect(bigInt("-9844190321790980841789").over(1)).toEqualBigInt("-9844190321790980841789");
        });

        it("by self is 1", function () {
            expect(bigInt(5).over(5)).toEqualBigInt(1);
            expect(bigInt(-5).over(-5)).toEqualBigInt(1);
            expect(bigInt("20194965098495006574").over("20194965098495006574")).toEqualBigInt(1);
            expect(bigInt("-20194965098495006574").over("-20194965098495006574")).toEqualBigInt(1);
        });

        it("by 0 throws an error", function () {
            expect(function () {
                bigInt(0).over(0);
            }).toThrow();
            expect(function () {
                bigInt(-0).over(0);
            }).toThrow();
            expect(function () {
                bigInt(5).over(0);
            }).toThrow();
            expect(function () {
                bigInt(-5).over(0);
            }).toThrow();
            expect(function () {
                bigInt("9549841598749874951041").over(0);
            }).toThrow();
            expect(function () {
                bigInt("-20964918940987496110974948").over(0);
            }).toThrow();
        });

        it("of 0 equals 0", function () {
            expect(bigInt(0).over(1)).toEqualBigInt(0);
            expect(bigInt(-0).over(1)).toEqualBigInt(0);
            expect(bigInt(-0).over("1234567890987654321")).toEqualBigInt(0);
            expect(bigInt(0).over("-1234567890987654321")).toEqualBigInt(0);
        });

        it("handles signs correctly", function () {
            expect(bigInt(10000).over(100)).toEqualBigInt(100);
            expect(bigInt(10000).over(-100)).toEqualBigInt(-100);
            expect(bigInt(-10000).over(100)).toEqualBigInt(-100);
            expect(bigInt(-10000).over(-100)).toEqualBigInt(100);
            expect(bigInt(100).over(-1000)).toEqualBigInt(0);

            expect(bigInt("163500573666152634716420931676158").over(13579)).toEqualBigInt("12040693251797086288859336598");
            expect(bigInt("163500573666152634716420931676158").over(-13579)).toEqualBigInt("-12040693251797086288859336598");
            expect(bigInt("-163500573666152634716420931676158").over(13579)).toEqualBigInt("-12040693251797086288859336598");
            expect(bigInt("-163500573666152634716420931676158").over(-13579)).toEqualBigInt("12040693251797086288859336598");

            expect(bigInt("1234567890987654321").over("132435465768798")).toEqualBigInt("9322");
            expect(bigInt("1234567890987654321").over("-132435465768798")).toEqualBigInt("-9322");
            expect(bigInt("-1234567890987654321").over("132435465768798")).toEqualBigInt("-9322");
            expect(bigInt("-1234567890987654321").over("-132435465768798")).toEqualBigInt("9322");

            expect(bigInt("786456456335437356436").over("-5423424653")).toEqualBigInt("-145011041298");
            expect(bigInt("-93453764643534523").over("-2342")).toEqualBigInt("39903400787162");
            expect(bigInt("10000000000000000").divide("-10000000000000000")).toEqualBigInt(-1);

            expect(bigInt("98789789419609840614360398703968368740365403650364036403645046").over(-1)).toEqualBigInt("-98789789419609840614360398703968368740365403650364036403645046");
        });

        it("works", function () {
            expect(bigIntover("98109840984098409156481068456541684065964819841065106865710397464513210416435401645030648036034063974065004951094209420942097421970490274195049120974210974209742190274092740492097420929892490974202241")).toEqualBigInt
            expect(bigInt(e).over(d)).toEqualBigInt
            expect(bigInt("1e1050").over("1e1000")).toEqualBigInt("1e50");
            expect(bigInt("650891045068740450350436540352434350243346254305240433565403624570436542564034355230360437856406345450735366803660233645540323657640436735034636550432635454032364560324366403643455063652403346540263364032643454530236455402336455640363263405423565405623454062354540326564062306456432664546654436564364556406435460643646363545606345066534456065340165344065234064564").over("2634565230452364554234565062345452365450236455423654456253445652344565423655423655462534506253450462354056523445062535462534052654350426355023654540625344056203455402635454026435501635446643754664546780646476442344654465764466744566754436556406235454066354570657548036545465")).toEqualBigInt("247058238507527885509216194910087226997858456323482112332514020694766925604284002588230023");
            expect(bigInt("650891045068740450350436540352434350243346254305240433565403624570436542564034355230360437856406345450735366803660233645540323657640436735034636550432635454032364560324366403643455063652403346540263364032643454530236455402336455640363263405423565405623454062354540326564062306456432664546654436564364556406435460643646363545606345066534456065340165344065234064564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000").overtoEqualBigInt("247058238507527885509216194910087226997858456323482112332514020694766925604284002588230023");
            expect(bigInt("9999999999999900000000000000").divide("999999999999990000001")).toEqualBigInt("9999999"); // issue #58
            expect(bigInt("1e9999").over("1e999")).toEqualBigInt("1e9000"); // issue #88
        });
    });

    describe("Modulo", function () {
        it("0 throws error", function () {
            expect(function () {
                bigInt(0).mod(0);
            }).toThrow();
            expect(function () {
                bigInt(-0).mod(0);
            }).toThrow();
            expect(function () {
                bigInt(5).mod(0);
            }).toThrow();
            expect(function () {
                bigInt(-5).mod(0);
            }).toThrow();
            expect(function () {
                bigInt("9549841598749874951041").mod(0);
            }).toThrow();
            expect(function () {
                bigInt("-20964918940987496110974948").mod(0);
            }).toThrow();
        });

        it("handles signs correctly", function () {
            expect(bigInt(124234233).mod(2)).toEqualBigInt(1);
            expect(bigInt(124234233).mod(-2)).toEqualBigInt(1);
            expect(bigInt(-124234233).mod(2)).toEqualBigInt(-1);
            expect(bigInt(-124234233).mod(-2)).toEqualBigInt(-1);
            expect(bigInt(2).mod(-1243233)).toEqualBigInt(2);
            expect(bigInt(-2).mod(-1243233)).toEqualBigInt(-2);

            expect(bigInt("786456456335437356436").mod("-5423424653")).toEqualBigInt("2663036842");
            expect(bigInt("93453764643534523").mod(-2342)).toEqualBigInt(1119);
            expect(bigInt(-32542543).mod(100000000)).toEqualBigInt(-32542543);
        });
    });

    describe("Power", function () {
        it("of 0 to 0 is 1 (mathematically debatable, but matches JavaScript behavior)", function () {
            expect(bigInt(0).pow(0)).toEqualBigInt(1);
            expect(bigInt(0).pow("-0")).toEqualBigInt(1);
            expect(bigInt("-0").pow(0)).toEqualBigInt(1);
            expect(bigInt("-0").pow("-0")).toEqualBigInt(1);
        });

        it("to negative numbers is 0", function () {
            expect(bigInt(0).pow(-298)).toEqualBigInt(0);
            expect(bigInt(543).pow(-2)).toEqualBigInt(0);
            expect(bigInt("323434643534523").pow(-1)).toEqualBigInt(0);
            expect(bigInt(-54302).pow("-543624724341214223562")).toEqualBigInt(0);
            expect(bigInt("-20199605604968").pow(-99)).toEqualBigInt(0);

            expect(bigInt(1).pow(-1)).toEqualBigInt(1);
            expect(bigInt(-1).pow(-1)).toEqualBigInt(-1);
            expect(bigInt(-1).pow(-2)).toEqualBigInt(1);
        });

        it("handles signs correctly", function () {
            expect(bigInt(2).pow(3)).toEqualBigInt(8);
            expect(bigInt(-2).pow(3)).toEqualBigInt(-8);
            expect(bigInt("1036350201654").pow(4)).toEqualBigInt("1153522698998527286707879497611725813209153232656");
            expect(bigInt("-1036350201654").pow(4)).toEqualBigInt("1153522698998527286707879497611725813209153232656");
            expect(bigInt("-154654987").pow(3)).toEqualBigInt("-3699063497752861435082803");

            expect(bigInt(1).pow(1)).toEqualBigInt(1);
            expect(bigInt(-1).pow(1)).toEqualBigInt(-1);
            expect(bigInt(-1).pow(2)).toEqualBigInt(1);
        });

        it("carries over correctly", function () {
            expect(bigInt("16").pow("13")).toEqualBigInt("4503599627370496");
            expect(bigInt("123456789123456789").pow("10")).toEqualBigInt("822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601");
            expect(bigInt("2").pow("63")).toEqualBigInt("9223372036854775808");
            // See issue #5
            //   https://github.com/peterolson/BigInteger.js/issues/5
            expect(bigInt(100).pow(56).toString()).not.toEqualBigInt("0");

        });

        it("throws an error when the exponent is too large", function () {
            try {
                bigInt(2).pow("1e100");
                expect(true).toBe(false);
            } catch (e) {
                expect(true).toBe(true);
            }
            expect(bigInt(1).pow("1e100")).toEqualBigInt(1);
            expect(bigInt(-1).pow("1e100")).toEqualBigInt(1);
            expect(bigInt(0).pow("1e100")).toEqualBigInt(0);
        });

        it("throws an error when the exponent is not an integer", function () {
            expect(function () {
                bigInt(5).pow(1 / 2);
            }).toThrow();
        });
    });

    describe("Power modulo", function () {
        it("works", function () {
            expect(bigInt(4).modPow(13, 497)).toEqualBigInt(445);

            // See Project Euler problem #97
            //   https://projecteuler.net/problem=97
            expect(bigInt(28433).times(bigInt(2).modPow(7830457, "1e10")).plus(1).mod("1e10")).toEqualBigInt(8739992577);
            expect(bigInt(0).modPow(4, 20)).toEqualBigInt(0);
            expect(bigInt(0).modPow(0, 20)).toEqualBigInt(1);
            try {
                bigInt(4).modPow(9, 0);
                expect(true).toBe(false);
            } catch (e) {
                expect(true).toBe(true);
            }
        });
    });

    describe("Modular multiplicative inverse", function () {
        it("works", function () {
            expect(bigInt(3).modInv(11)).toEqualBigInt(4);
            expect(bigInt(42).modInv(2017)).toEqualBigInt(1969);
            expect(bigInt(-50).modInv(83)).toEqualBigInt(-5); // issue #87
            expect(function () {
                bigInt(154).modInv(3311);
            }).toThrow();
        });
    });

    describe("Square", function () {
        it("works", function () {
            expect(bigInt(0).square()).toEqualBigInt(0);
            expect(bigInt(16).square()).toEqualBigInt(256);
            expect(bigInt(-16).square()).toEqualBigInt(256);
            expect(bigInt("65536").square()).toEqualBigInt("4294967296");
        });
    });

    describe("prev and next", function () {
        it("work", function () {
            expect(bigInt(0).next()).toEqualBigInt(1);
            expect(bigInt(-1).next()).toEqualBigInt(0);
            expect(bigInt(34).next()).toEqualBigInt(35);
            expect(bigInt("9007199254740992").next()).toEqualBigInt("9007199254740993");
            expect(bigInt("-9007199254740992").next()).toEqualBigInt("-9007199254740991");
            expect(bigInt("9007199254740992999").next()).toEqualBigInt("9007199254740993000");
            expect(bigInt("9007199254740991").next()).toEqualBigInt("9007199254740992");

            expect(bigInt(0).prev()).toEqualBigInt(-1);
            expect(bigInt(-1).prev()).toEqualBigInt(-2);
            expect(bigInt(34).prev()).toEqualBigInt(33);
            expect(bigInt("9007199254740992").prev()).toEqualBigInt("9007199254740991");
            expect(bigInt("-9007199254740992").prev()).toEqualBigInt("-9007199254740993");
            expect(bigInt("9007199254740992999").prev()).toEqualBigInt("9007199254740992998");
            expect(bigInt("-9007199254740991").prev()).toEqualBigInt("-9007199254740992");
        });
    });

    describe("min and max", function () {
        it("work", function () {
            expect(bigInt.max(6, 6)).toEqualBigInt(6);
            expect(bigInt.max(77, 432)).toEqualBigInt(432);
            expect(bigInt.max(432, 77)).toEqualBigInt(432);
            expect(bigInt.max(77, -432)).toEqualBigInt(77);
            expect(bigInt.max(432, -77)).toEqualBigInt(432);
            expect(bigInt.max(-77, 432)).toEqualBigInt(432);
            expect(bigInt.max(-432, 77)).toEqualBigInt(77);
            expect(bigInt.max(-77, -432)).toEqualBigInt(-77);
            expect(bigInt.max(-432, -77)).toEqualBigInt(-77);

            expect(bigInt.min(6, 6)).toEqualBigInt(6);
            expect(bigInt.min(77, 432)).toEqualBigInt(77);
            expect(bigInt.min(432, 77)).toEqualBigInt(77);
            expect(bigInt.min(77, -432)).toEqualBigInt(-432);
            expect(bigInt.min(432, -77)).toEqualBigInt(-77);
            expect(bigInt.min(-77, 432)).toEqualBigInt(-77);
            expect(bigInt.min(-432, 77)).toEqualBigInt(-432);
            expect(bigInt.min(-77, -432)).toEqualBigInt(-432);
            expect(bigInt.min(-432, -77)).toEqualBigInt(-432);
        });
    });

    describe("lcm and gcd", function () {
        it("work", function () {
            expect(bigInt.lcm(21, 6)).toEqualBigInt(42);
            expect(bigInt.gcd(42, 56)).toEqualBigInt(14);
            expect(bigInt.gcd(0, 56)).toEqualBigInt(56);
            expect(bigInt.gcd(42, 0)).toEqualBigInt(42);
            expect(bigInt.gcd(17, 103)).toEqualBigInt(1);
            expect(bigInt.gcd(192, 84)).toEqualBigInt(12);
        });
    });

    describe("Increment and decrement", function () {
        it("works for small values", function () {
            expect(bigInt(546).prev()).toEqualBigInt(545);
            expect(bigInt(1).prev()).toEqualBigInt(0);
            expect(bigInt(0).prev()).toEqualBigInt(-1);
            expect(bigInt(-1).prev()).toEqualBigInt(-2);
            expect(bigInt(-1987).prev()).toEqualBigInt(-1988);

            expect(bigInt(546).next()).toEqualBigInt(547);
            expect(bigInt(1).next()).toEqualBigInt(2);
            expect(bigInt(0).next()).toEqualBigInt(1);
            expect(bigInt(-1).next()).toEqualBigInt(0);
            expect(bigInt(-1987).next()).toEqualBigInt(-1986);
        });
        it("works for large values", function () {
            expect(bigInt("109874981950949849811049").prev()).toEqualBigInt("109874981950949849811048");
            expect(bigInt("109874981950949849811049").next()).toEqualBigInt("109874981950949849811050");
            expect(bigInt("-109874981950949849811049").prev()).toEqualBigInt("-109874981950949849811050");
            expect(bigInt("-109874981950949849811049").next()).toEqualBigInt("-109874981950949849811048");
        });
        it("carries over correctly", function () {
            expect(bigInt(9999999).next()).toEqualBigInt(10000000);
            expect(bigInt(10000000).prev()).toEqualBigInt(9999999);
        });
    });

    describe("Absolute value", function () {
        it("works", function () {
            expect(bigInt(0).abs()).toEqualBigInt(0);
            expect(bigInt("-0").abs()).toEqualBigInt(0);
            expect(bigInt(54).abs()).toEqualBigInt(54);
            expect(bigInt(-54).abs()).toEqualBigInt(54);
            expect(bigInt("13412564654613034984065434").abs()).toEqualBigInt("13412564654613034984065434");
            expect(bigInt("-13412564654613034984065434").abs()).toEqualBigInt("13412564654613034984065434");
        });
    });

    describe("isPositive and isNegative", function () {
        it("return `false` for 0 and -0", function () {
            expect(bigInt(0).isPositive()).toBe(false);
            expect(bigInt(0).isNegative()).toBe(false);
            expect(bigInt(-0).isPositive()).toBe(false);
            expect(bigInt(-0).isNegative()).toBe(false);
        });

        it("work for small numbers", function () {
            expect(bigInt(1).isPositive()).toBe(true);
            expect(bigInt(543).isNegative()).toBe(false);
            expect(bigInt(-1).isPositive()).toBe(false);
            expect(bigInt(-765).isNegative()).toBe(true);
        });

        it("work for big numbers", function () {
            expect(bigInt("651987498619879841").isPositive()).toBe(true);
            expect(bigInt("0054984980098460").isNegative()).toBe(false);
            expect(bigInt("-1961987984109078496").isPositive()).toBe(false);
            expect(bigInt("-98800984196109540984").isNegative()).toBe(true);
        });
    });

    describe("isEven and isOdd", function () {
        it("work correctly", function () {
            expect(bigInt(0).isEven()).toBe(true);
            expect(bigInt(0).isOdd()).toBe(false);

            expect(bigInt(654).isEven()).toBe(true);
            expect(bigInt(654).isOdd()).toBe(false);

            expect(bigInt(653).isOdd()).toBe(true);
            expect(bigInt(653).isEven()).toBe(false);

            expect(bigInt(-984).isEven()).toBe(true);
            expect(bigInt(-984).isOdd()).toBe(false);

            expect(bigInt(-987).isOdd()).toBe(true);
            expect(bigInt(-987).isEven()).toBe(false);

            expect(bigInt("9888651888888888").isEven()).toBe(true);
            expect(bigInt("9888651888888888").isOdd()).toBe(false);

            expect(bigInt("1026377777777777").isOdd()).toBe(true);
            expect(bigInt("1026377777777777").isEven()).toBe(false);

            expect(bigInt("-9888651888888888").isEven()).toBe(true);
            expect(bigInt("-9888651888888888").isOdd()).toBe(false);

            expect(bigInt("-1026377777777777").isOdd()).toBe(true);
            expect(bigInt("-1026377777777777").isEven()).toBe(false);
        });
    });

    describe("isDivisibleBy", function () {
        it("works", function () {
            expect(bigInt(999).isDivisibleBy(333)).toBe(true);
            expect(bigInt(999).isDivisibleBy(331)).toBe(false);
            expect(bigInt(999).isDivisibleBy(0)).toBe(false);
            expect(bigInt(999).isDivisibleBy(1)).toBe(true);
            expect(bigInt(999).isDivisibleBy(2)).toBe(false);
        });
    });

    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571];

    describe("isPrime", function () {
        it("correctly identifies prime numbers", function () {
            for (var i = 0; i < primes.length; i++) {
                expect(bigInt(primes[i]).isPrime()).toBe(true);
            }
        });
        it("correctly rejects nonprime numbers", function () {
            var nonPrimes = [1, 4, 3 * 5, 4 * 7, 7 * 17, 3 * 103, 17 * 97, 7917];
            for (var i = 0; i < nonPrimes.length; i++) {
                expect(bigInt(nonPrimes[i]).isPrime()).toBe(false);
            }
        });
    });

    describe("isProbablePrime", function () {
        it("returns true for any prime", function () {
            for (var i = 0; i < primes.length; i++) {
                expect(bigInt(primes[i]).isProbablePrime()).toBe(true);
            }
        });
        it("has false positive rate less than 0.5%", function () {
            var totalPrimes = 0, falsePrimes = 0;
            for (var i = 1; i < 1e4; i++) {
                var x = bigInt(i);
                if (x.isPrime()) {
                    totalPrimes++;
                } else if (x.isProbablePrime()) {
                    falsePrimes++;
                }
            }
            expect(falsePrimes / totalPrimes < 0.005).toBe(true);
        });
    });

    describe("isUnit", function () {
        it("works", function () {
            expect(bigInt.one.isUnit()).toBe(true);
            expect(bigInt.minusOne.isUnit()).toBe(true);
            expect(bigInt.zero.isUnit()).toBe(false);
            expect(bigInt(5).isUnit()).toBe(false);
            expect(bigInt(-5).isUnit()).toBe(false);
            expect(bigInt("654609649089416160").isUnit()).toBe(false);
            expect(bigInt("-98410980984981094").isUnit()).toBe(false);
        });
    });

    describe("isZero", function () {
        it("works", function () {
            expect(bigInt.zero.isZero()).toBe(true);
            expect(bigInt(0).isZero()).toBe(true);
            expect(bigInt("-0").isZero()).toBe(true);
            expect(bigInt(15).isZero()).toBe(false);
            expect(bigInt(-15).isZero()).toBe(false);
            expect(bigInt("63213098189462109840").isZero()).toBe(false);
            expect(bigInt("-64343745644564564563").isZero()).toBe(false);
            expect(bigInt().isZero()).toBe(true);
            expect(bigInt(0, 10).isZero()).toBe(true);
        });
    });

    describe("Throw error in input with", function () {
        function test(input) {
            expect(function () {
                bigInt(input);
            }).toThrow();
        }
        it("multiple minus signs at the beginning", function () {
            test("--123");
            test("---1423423");
        });

        it("non-numeric symbols", function () {
            test("43a34");
            test("4+7=11");
        })

        it("multiple exponents", function () {
            test("43e4e6");
            test("234234e43523e4354");
            try {
                bigInt("4e5e5");
            } catch (e) {
                expect(e instanceof TypeError).toBe(false);
            }
        });

        it("decimal point when exponent is too small", function () {
            test("1.24595e3");
        })

        describe("but not with", function () {
            it("e or E for the exponent", function () {
                expect(bigInt("2e7").equals("2E7")).toBe(true);
            });

            it("e+ or E+ for the exponent", function () {
                expect(bigInt("2e7").equals("2E+7")).toBe(true);
                expect(bigInt("1.7976931348623157e+308").equals("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")).toBe(true);
            });

            it("decimal point when exponent is large enough", function () {
                expect(bigInt("1.32e2").equals("132")).toBe(true);
            });
        });
    });

    describe("toString", function () {
        it("works for leading and trailing zeroes", function () {
            expect(bigInt("10000000").toString() === "10000000").toBe(true);
            expect(bigInt("100001010000000").toString() === "100001010000000").toBe(true);
            expect(bigInt("00000000010000000").toString() === "10000000").toBe(true);
            expect(bigInt("00000000100001010000000").toString() === "100001010000000").toBe(true);
        });

        // See issue #13
        //   https://github.com/peterolson/BigInteger.js/issues/13
        it("of 0*-1 is '0'", function () {
            expect(bigInt(0).multiply(-1).toString() === "0").toBe(true);
        });

        // See pull request #16
        //  https://github.com/peterolson/BigInteger.js/pull/16
        it("of (0/1)-100 is '-100'", function () {
            expect((bigInt("0")).divide(bigInt("1")).add(bigInt("-100")).toString() === "-100").toBe(true);
        });
    });

    describe("valueOf and toJSNumber", function () {
        it("works", function () {
            expect(bigInt(100) + bigInt(200) === 300).toBe(true);
            expect(bigInt("100000000000300") - bigInt("100000000000000") === 300).toBe(true);
            expect(bigInt(100).valueOf() === 100).toBe(true);
            expect(bigInt("1e30").valueOf() === 1e30).toBe(true);
            expect(+bigInt(43.9e30) === 43.9e30).toBe(true);
            expect(+bigInt("1.11e+30") == 1.11e+30).toBe(true);
            expect(bigInt(100).toJSNumber === bigInt(100).valueOf).toBe(true);
            expect(bigInt("1e30").toJSNumber === bigInt("4e20").valueOf).toBe(true);
            expect(bigInt("100000000000000008193").toJSNumber()).toBe(100000000000000016384);
        });
    });

    describe("Base conversion", function () {
        it("parses numbers correctly", function () {
            expect(bigInt("10", 2).equals(2)).toBe(true);
            expect(bigInt("FF", 16)).toEqualBigInt(255);
            expect(bigInt("111100001111", -2)).toEqualBigInt(-1285);
            expect(bigInt("<5><10>35<75><44><88><145735>", "-154654987")).toEqualBigInt("-10580775516023906041313915824083789618333601575504631498551");

            // See pull request 16
            //   https://github.com/peterolson/BigInteger.js/pull/15
            expect(bigInt("-1", 16)).toEqualBigInt(-1);
            expect(bigInt("306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000")).toEqualBigInt(bigInt("9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000", 16));
            expect(bigInt("9223372036854775808")).toEqualBigInt(bigInt("1000000000000000000000000000000000000000000000000000000000000000", 2));
            expect(bigInt("324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232", 16)).toEqualBigInt("22748133857356174891035811692236022265357659892433333914058690475216129757746");
            expect(bigInt("234345345345")).toEqualBigInt(bigInt("3690123141", 16));
            expect(bigInt("-10", 16)).toEqualBigInt("-16");
        });
		
		it("errors on invalid input", function() {
		//	expect(function () {
            	//    bigInt("$,%@#^", "55");
            	//}).toThrow();	//negative number returned.
			// See issue 101
			//    https://github.com/peterolson/BigInteger.js/issues/101
            expect(function () {
                bigInt("0x10000", 16);
            }).toEqualBigInt(bigInt('65536'));
	    expect(function () {
                bigInt("a9", 10);
            }).toThrow();
	    expect(function () {
                bigInt("33", 2);
            }).toThrow();
        });
        
        it("outputs numbers correctly", function () {
            expect(bigInt("366900685503779409298642816707647664013657589336").toString(16) === "4044654fce69424a651af2825b37124c25094658").toBe(true);
            expect(bigInt("111111111111111111111111111111111111111111111111111111", 2).toString(2) === "111111111111111111111111111111111111111111111111111111").toBe(true);
            //expect(bigInt("secretmessage000", -36).toString(-36) === "secretmessage000").toBe(true); //-> returned false
            expect(bigInt(-256).toString(16) === "-100").toBe(true);
            //expect(bigInt(256).toString(1).length === 256).toBe(true); //false, because <1><1>..., not 11111...(256 times)
            expect(bigInt(bigInt(77).toString(-1), -1)).toEqualBigInt(77);
            expect(bigInt(10).toString(0) === '<0>').toThrow();

            // see issue #67
            // https://github.com/peterolson/BigInteger.js/issues/67
            //expect(bigInt(36).toString(40) === "<36>").toBe(true); //unicode and alphabet added, return L.
            //Make base greather than 63008:
            expect(bigInt(36).toString(63009) === "<36>").toBe(true); //true
        });

        it("converts to arrays correctly", function() {
          expect(bigInt("1e9").toArray(10)).toEqual({
            value: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            isNegative: false
          });

          expect(bigInt("1e20").toArray(10)).toEqual({
            value: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            isNegative: false
          });

          expect(bigInt("1e9").toArray(16)).toEqual({
            value: [3, 11, 9, 10, 12, 10, 0, 0],
            isNegative: false
          });

          expect(bigInt(567890).toArray(100)).toEqual({
            value: [56, 78, 90],
            isNegative: false
          });

          expect(bigInt(12345).toArray(-10)).toEqual({
            value: [2, 8, 4, 6, 5],
            isNegative: false
          });

          expect(bigInt(-15).toArray(1)).toEqual({
            value: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            isNegative: true
          });

          expect(bigInt(0).toArray(1)).toEqual({
            value: [0],
            isNegative: false
          });

          expect(bigInt(-15).toArray(-1)).toEqual({
            value: [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0],
            isNegative: false
          });

          expect(bigInt(0).toArray(-1)).toEqual({
            value: [0],
            isNegative: false
          });

          expect(bigInt(0).toArray(0)).toEqual({
            value: [0],
            isNegative: false
          });

          expect(function () {return bigInt(1).toArray(0);}).toThrow();
        });
    });

    describe("Bitwise operations", function () {
        it("shifting left and right work", function () {
            expect(bigInt(-5).shiftRight(2)).toEqualBigInt(-2);
            expect(bigInt(5).shiftRight(-2)).toEqualBigInt(20);
            expect(bigInt(5).shiftLeft(-2)).toEqualBigInt(1);
            expect(bigInt(1024).shiftLeft(100)).toEqualBigInt("1298074214633706907132624082305024");
            expect(bigInt("2596148429267413814265248164610049").shiftRight(100)).toEqualBigInt(2048);
            expect(bigInt("8589934592").shiftRight(-50)).toEqualBigInt("9671406556917033397649408");
            expect(bigInt("38685626227668133590597632").shiftLeft(-50)).toEqualBigInt("34359738368");
            expect(bigInt("-1").shiftRight(25)).toEqualBigInt(-1);
        });

        it("shifting left and right throw for large shifts", function () {
            expect(function () {
                bigInt(5).shiftLeft("5e10");
            }).toThrow();
            expect(function () {
                bigInt(5).shiftRight("5e10");
            }).toThrow();
        });

        it("and, or, xor, and not work", function () {
            expect(bigInt("435783453").and("902345074")).toEqualBigInt("298352912");
            expect(bigInt("435783453").or("902345074")).toEqualBigInt("1039775615");
            expect(bigInt("435783453").xor("902345074")).toEqualBigInt("741422703");
            expect(bigInt("94981987261387596").not()).toEqualBigInt("-94981987261387597");
            expect(bigInt("-6931047708307681506").xor("25214903917")).toEqualBigInt("-6931047723896018573");
            expect(bigInt("-6931047723896018573").and("281474976710655")).toEqualBigInt("273577603885427");
            expect(bigInt("-65").xor("-42")).toEqualBigInt("105");
            expect(bigInt("6").and("-3")).toEqualBigInt("4");
            expect(bigInt("0").not()).toEqualBigInt("-1");
            expect(bigInt("13").or(-8)).toEqualBigInt("-3");
            expect(bigInt("12").xor(-5)).toEqualBigInt("-9");
        });
    });

    describe("randBetween", function () {
        it("return numbers in correct range", function () {
            expect(bigInt.randBetween(0, 10).leq(10)).toBe(true);
            expect(bigInt.randBetween(0, 10).geq(0)).toBe(true);

            expect(bigInt.randBetween(0, "9e99").leq("9e99")).toBe(true);
            expect(bigInt.randBetween(0, "9e99").geq(0)).toBe(true);

            expect(bigInt.randBetween("-9e99", 10).leq(10)).toBe(true);
            expect(bigInt.randBetween("-9e99", 10).geq("-9e99")).toBe(true);

            expect(bigInt.randBetween("-9e99", "9e99").leq("9e99")).toBe(true);
            expect(bigInt.randBetween("-9e99", "9e99").geq("-9e99")).toBe(true);
        });
        it("always returns integers", function () {
            expect(+bigInt.randBetween(0, 127) % 1).toBe(0);

            for (var i = 0; i < 20; i++) { // issue #60
                expect(bigInt.randBetween(0, "11703780079612452").toString()).not.toBe("undefined");
            }
        });
        it("is within 10% of uniform distribution (this test is probabilistic and has a small change of failing)", function () {
            var buckets = new Array(25), N = 50000;
            for (var i = 0; i < buckets.length; i++) buckets[i] = 0;
            var min = bigInt[0], max = bigInt("1e25"), divisor = max.over(buckets.length);
            for (var i = 0; i < N; i++) {
                buckets[bigInt.randBetween(min, max).over(divisor)]++;
            }
            var ideal = N / buckets.length;
            for (var i = 0; i < buckets.length; i++) {
                expect(Math.abs(buckets[i] - ideal) / ideal < 0.1).toBe(true);
            }
        });
    });

    describe("isInstance", function () {
        it("works", function () {
            expect(bigInt.isInstance(bigInt(14))).toBe(true);
            expect(bigInt.isInstance(14)).toBe(false);
            expect(bigInt.isInstance(bigInt("2343345345345236243564564363546"))).toBe(true);
            expect(bigInt.isInstance("3456356345634564356435643634564334")).toBe(false);
        });
    });

    describe("fromArray", function () {
        it("works", function () {
            expect(bigInt.fromArray([1, 2, 3, 4, 5])).toEqualBigInt("12345");
            expect(bigInt.fromArray([1, 2, 3, 4, 5], 10)).toEqualBigInt("12345");
            expect(bigInt.fromArray([1, 2, 3, 4, 5], 10, true)).toEqualBigInt("-12345");
            expect(bigInt.fromArray([1, 2, 3, 4, 5], 256)).toEqualBigInt("4328719365");
        });
    });

    describe("Aliases", function () {
        it("add, plus are the same", function () {
            expect(bigInt.one.add === bigInt.one.plus).toBe(true);
        });
        it("compare, compareTo are the same", function () {
            expect(bigInt.one.compare === bigInt.one.compareTo).toBe(true);
        });
        it("divide, over are the same", function () {
            expect(bigInt.one.divide === bigInt.one.over).toBe(true);
        });
        it("equals, eq are the same", function () {
            expect(bigInt.one.equals === bigInt.one.eq).toBe(true);
        });
        it("greater, gt are the same", function () {
            expect(bigInt.one.greater === bigInt.one.gt).toBe(true);
        });
        it("greaterOrEquals, geq are the same", function () {
            expect(bigInt.one.greaterOrEquals === bigInt.one.geq).toBe(true);
        });
        it("lesser, lt are the same", function () {
            expect(bigInt.one.lesser === bigInt.one.lt).toBe(true);
        });
        it("lesserOrEquals, leq are the same", function () {
            expect(bigInt.one.lesserOrEquals === bigInt.one.leq).toBe(true);
        });
        it("notEquals, neq are the same", function () {
            expect(bigInt.one.notEquals === bigInt.one.neq).toBe(true);
        });
        it("subtract, minus are the same", function () {
            expect(bigInt.one.subtract === bigInt.one.minus).toBe(true);
        });     
        it("mod, remainder are the same", function () {
            expect(bigInt.one.mod === bigInt.one.remainder).toBe(true);
        });
        it("multiply, times are the same", function () {
            expect(bigInt.one.multiply === bigInt.one.times).toBe(true);
        });
    });

    describe("Integer", function () {
        it("prototype chain", function () {
            expect(bigInt(14) instanceof bigInt).toBe(true);
            expect(bigInt(10e20) instanceof bigInt).toBe(true);
        });

        it("object construction", function() {
            expect((new bigInt(14)).add(new bigInt(7)).eq(21)).toBe(true);
        });
        
        it("JSON stringifiction", function() {
            var x = JSON.parse(JSON.stringify({
                a: bigInt(4), 
                b: bigInt("4e100")
            }));
            expect(x.a).toEqualBigInt("4");
            expect(x.b).toEqualBigInt("4e100");
        });
    });
});
